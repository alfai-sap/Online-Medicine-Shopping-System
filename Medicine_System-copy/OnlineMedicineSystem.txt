import java.util.regex.Pattern;
public class User {
    private int userId;
    private String name;
    private String email;
    private String password;

    public User(int userId, String name, String email, String password) {
        this.userId = userId;
        this.name = name;
        this.email = email;
        this.password = password;
    }

    public boolean register(String name, String email, String password) {
        if (validateInput(email, password)) {
            this.name = name;
            this.email = email;
            this.password = password;
            return true;
        }
        return false;
    }

    public boolean login(String email, String password) {
        return this.email.equals(email) && this.password.equals(password);
    }

    private boolean validateInput(String email, String password) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
        return !email.isEmpty() && Pattern.matches(emailRegex, email) && password.length() >= 6;
    }

    // Add this getter
    public String getName() {
        return name;
    }
}


import java.util.ArrayList;

public class Admin extends User {
    private Inventory inventory;

    public Admin(int userId, String name, String email, String password) {
        super(userId, name, email, password);
        this.inventory = new Inventory();
    }

    public void addMedicine(Medicine medicine) {
        inventory.addMedicine(medicine);
    }

    public void updateMedicine(Medicine medicine) {
        inventory.updateStock(medicine.getMedicineId(), medicine.getStock());
    }

    public void viewAllOrders(ArrayList<Order> orders) {
        for (Order order : orders) {
            System.out.println(order);
        }
    }

    public void manageStock() {
        inventory.displayInventory();
    }
}


import java.util.ArrayList;

public class Customer extends User {
    private Cart cart;
    private ArrayList<Order> orderHistory;

    public Customer(int userId, String name, String email, String password) {
        super(userId, name, email, password);
        this.cart = new Cart();
        this.orderHistory = new ArrayList<>();
    }

    public void addToCart(Medicine medicine) {
        cart.addMedicine(medicine);
    }

    public void removeFromCart(Medicine medicine) {
        cart.removeMedicine(medicine);
    }

    public Order checkout() {
        double totalAmount = cart.calculateTotalPrice();
        Order newOrder = new Order(orderHistory.size() + 1, this, cart, totalAmount, "Placed");
        orderHistory.add(newOrder);
        cart.clearCart();
        return newOrder;
    }

    public void viewOrderHistory() {
        for (Order order : orderHistory) {
            System.out.println(order);
        }
    }
}

import java.util.ArrayList;

public class Cart {
    private ArrayList<Medicine> medicines;
    private double discountPercentage;

    public Cart() {
        this.medicines = new ArrayList<>();
        this.discountPercentage = 0; // Default no discount
    }

    public void addMedicine(Medicine medicine) {
        medicines.add(medicine);
    }

    public void removeMedicine(Medicine medicine) {
        medicines.remove(medicine);
    }

    // Calculate the total number of items in the cart
    public int calculateItemCount() {
        return medicines.size(); // Returns the total number of medicines
    }

    // Calculate the total price of all items in the cart
    public double calculateTotalPrice() {
        double totalPrice = 0.0;
        for (Medicine medicine : medicines) {
            totalPrice += medicine.getPrice(); // Add the price of each medicine
        }
        return totalPrice - (totalPrice * discountPercentage / 100);
    }

    public String displayCart() {
        StringBuilder cartDetails = new StringBuilder();
        for (Medicine medicine : medicines) {
            cartDetails.append(medicine.getDetails()).append("\n");
        }
        return cartDetails.toString();
    }

    public void clearCart() {
        medicines.clear();
    }
    
    // Apply a discount to the cart
    public void applyDiscount(double discountPercentage) {
        if (discountPercentage < 0 || discountPercentage > 100) {
            System.out.println("Invalid discount percentage.");
        } else {
            this.discountPercentage = discountPercentage;
        }
    }

    // Get current discount
    public double getDiscountPercentage() {
        return discountPercentage;
    }
}


import java.time.LocalDateTime;

public class Order {
    private int orderId;
    private Customer customer;
    private Cart cart;
    private double totalAmount;
    private String status;
    private LocalDateTime orderDate; // New attribute for order date and time

    public Order(int orderId, Customer customer, Cart cart, double totalAmount, String status) {
        this.orderId = orderId;
        this.customer = customer;
        this.cart = cart;
        this.totalAmount = totalAmount;
        this.status = status;
        this.orderDate = LocalDateTime.now();
    }

    public void placeOrder() {
        this.status = "Placed";
    }

    public String trackOrder() {
        return this.status;
    }

    public void cancelOrder() {
        if (!"Processed".equals(this.status)) {
            this.status = "Canceled";
        }
    }

    @Override
    public String toString() {
        return "Order ID: " + orderId + 
               ", Total Amount: $" + totalAmount + 
               ", Status: " + status + 
               ", Customer: " + customer.getName() + 
               ", Items: " + cartDetails() + 
               ", Order Date: " + orderDate;
    }

    private String cartDetails() {
        // Fetching cart details as a String
        return cart.displayCart();
    }

    // Getters and Setters for attributes if needed
    public int getOrderId() {
        return orderId;
    }

    public Customer getCustomer() {
        return customer;
    }

    public Cart getCart() {
        return cart;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public String getStatus() {
        return status;
    }
}

public class Medicine {
    private int medicineId;
    private String name;
    private double price;
    private String components;
    private String sideEffects;
    private int stock;
    private String imagePath; // New attribute for storing the image path

    public Medicine(int medicineId, String name, double price, String components, String sideEffects, int stock, String imagePath) {
        this.medicineId = medicineId;
        this.name = name;
        this.price = price;
        this.components = components;
        this.sideEffects = sideEffects;
        this.stock = stock;
        this.imagePath = imagePath; // Initialize the image path
    }

    public double getPrice() { // Add this method to return the price
        return price;
    }
    
    public int getMedicineId() {
        return medicineId;
    }

    public String getDetails() {
        return "ID: " + medicineId + ", Name: " + name + ", Price: $" + price + 
               ", Components: " + components + ", Side Effects: " + sideEffects + 
               ", Stock: " + stock + ", Image Path: " + imagePath;
    }

    public boolean isAvailable() {
        return stock > 0;
    }

    public void updateStock(int quantity) {
        stock += quantity;
    }

    public int getStock() {
        return stock;
    }

    public String getImagePath() {
        return imagePath;
    }
}

import java.util.ArrayList;

public class Inventory {
    private ArrayList<Medicine> medicineList;

    public Inventory() {
        this.medicineList = new ArrayList<>();
    }

    public void addMedicine(Medicine medicine) {
        medicineList.add(medicine);
    }

    public void updateStock(int medicineId, int quantity) {
        for (Medicine medicine : medicineList) {
            if (medicine.getMedicineId() == medicineId) {
                medicine.updateStock(quantity);
                return;
            }
        }
        System.out.println("Medicine not found in inventory.");
    }

    public void displayInventory() {
        for (Medicine medicine : medicineList) {
            System.out.println(medicine.getDetails());
        }
    }
}

public class Payment {
    private double amount;
    private String paymentMethod;
    private String paymentStatus;

    public Payment(double amount, String paymentMethod) {
        this.amount = amount;
        this.paymentMethod = paymentMethod;
        this.paymentStatus = "Pending";
    }

    public void processPayment() {
        if (validatePayment()) {
            paymentStatus = "Completed";
            System.out.println("Payment of " + amount + "php via " + paymentMethod + " is successful.");
        } else {
            System.out.println("Payment validation failed.");
        }
    }

    private boolean validatePayment() {
        return amount > 0 && 
               (paymentMethod.equals("Credit Card") || 
                paymentMethod.equals("Cash") || 
                paymentMethod.equals("Gcash") || 
                paymentMethod.equals("Bank Transfer"));
    }

    public void refund() {
        if ("Completed".equals(paymentStatus)) {
            paymentStatus = "Refunded";
            System.out.println("Payment of " + amount + "php has been refunded.");
        } else {
            System.out.println("Refund not possible. Current status: " + paymentStatus);
        }
    }

    public String getPaymentStatus() {
        return paymentStatus;
    }
}


